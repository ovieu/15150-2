structure Search : SEARCH =
struct
  structure P = Tree

  (* also try testing with one of these once you have implemented them:
   * structure P = Shrub
   * structure P = Combinations
   *)

  (* find_help : P.elem -> P.stree -> (P.result -> 'a) -> (unit -> 'a) -> 'a
   * REQUIRES: s is total
   * ENSURES: find_help i t s k ==> s(r), where r is the list of decisions
   * that leads to finding i in t, or k() if i is not in t
   *)
  fun find_help (i : P.elem) (t : P.stree) (s : P.result -> 'a)
      (k : unit -> 'a) : 'a =
      case (P.atRoot(i,t)) of
        true  => s []
       |false => (case (P.branch t) of
                    [] => k()
                   |x::xs =>
                 (let
                     val (d, st) = x
                  in
                    find_help i st (fn r => s(d::r)) (fn () =>
                    foldr (fn ((d',st'),s') =>
                              find_help i st' (fn r'' => s(d'::r''))
                                              (fn () => s')) (k()) xs)
                   end))


  fun find (i : P.elem) (t : P.stree) =
      find_help i t SOME (fn () => NONE)

  val SOME([P.Right,
            P.Right]) = find 5 (P.Node(P.Node(P.Node(P.Empty,3,P.Empty),89,
                                     P.Node(P.Empty,2,P.Empty)),
                            75,
                              P.Node(P.Node(P.Empty,4,P.Empty),69,
                                     P.Node(P.Empty,5,P.Empty))))
  val SOME([P.Right,
           P.Right,
            P.Left]) = find ~12 (P.Node(P.Node(P.Node(P.Node(
                                                      P.Empty,~91,P.Empty),
                                                      ~7,
                                                      P.Node(
                                                      P.Empty,101,P.Empty)),
                                               6,
                                               P.Node(P.Node(
                                                      P.Empty,4,P.Empty),
                                                     13,
                                                     P.Node(
                                                     P.Empty,19,P.Empty))),
                                       5,
                                       P.Node(P.Node(P.Node(
                                                     P.Empty,8,P.Empty),
                                                     12,
                                                     P.Node(
                                                     P.Empty,7,P.Empty)),
                                              10,
                                              P.Node(P.Node(
                                                     P.Empty,~12,P.Empty),
                                                     26,
                                                     P.Node(
                                                     P.Empty,29,P.Empty)))))
  val NONE = find ~12 (P.Node(P.Node(P.Node(P.Node(P.Empty,~91,P.Empty),
                                            ~7,
                                            P.Node(P.Empty,101,P.Empty)),
                                     6,
                                     P.Node(P.Node(P.Empty,4,P.Empty),
                                            13,
                                            P.Node(P.Empty,19,P.Empty))),
                                       5,
                                       P.Node(P.Node(
                                              P.Node(P.Empty,8,P.Empty),
                                              12,
                                              P.Node(P.Empty,7,P.Empty)),
                                              10,
                                              P.Node(
                                              P.Node(P.Empty,~13,P.Empty),
                                                     26,
                                              P.Node(P.Empty,29,P.Empty)))))


end
